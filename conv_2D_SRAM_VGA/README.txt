This program performs 2D convolution based on a 160x120 convolution matrix (a 16 color bitmap that is stored in a memory initialization file) that it inputs as well as one of three 5x5 kernels (also stored in a mif) that the matrix is convolved with as defined in the groundhog benchmark.   All of the handshaking, input, and output signals that are in the benchmark are used in this design.  Currently the sender is built internally within the program and the inputs for the convolution matrix are defined within.  Because of this, the input_data_valid and convolution_matrix signals are defined as registers and are controlled manually rather than being inputs.

The kernel is the first input and it is stored in the array in reverse order to represent it being flipped.  This is designed for the Altera DE2 board and if switch 0 is high, a blur effect is used, switch 1 is a motion blur and anything else is just a kernel that does not do any effects.  This is stored in the on chip memory because it is a small size and the retrieval is faster which is good because it is used 19,200 times during the convolution stage.  The next input is the original matrix which is stored in an SRAM.  The matrix is 16 color bitmap which is divided into quadrants with different images to demonstrate the different effects.  Each element is written for two clock cycles to ensure that it is stored in the SRAM.  After this is done, the convolution stage begins.  Each element in the SRAM is also read for two clock cycles.  After each step, the result is output and the output_data_valid signal goes high.  Each pixel is also sent through a VGA to a monitor which shows the result of the convolution.
